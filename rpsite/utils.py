from django.conf import settings
from hashlib import sha256
import gmpy2

def hashing(*args, **kwargs):
    i = 1
    for j in args:
        i *= j
    return int(sha256(str(i).encode()).hexdigest(), 16) % 731499577

def verify(pubkey, classno, **kwargs):
    params = {key: int(kwargs[key]) for key in kwargs}
    grnym = int(sha256(classno.encode()).hexdigest(), 16) % 731499577
    grnym = pow(grnym, settings.RNYM_PARAM['exp'], settings.RNYM_PARAM['gamma'])
    if params['x'] != hashing(
        params['C'], params['Cv'], params['Ce'],
        params['Cs'], params['Cx'], params['Cz'],
        params['Cw'], pubkey['g'], pubkey['h']
    ):
        return 'f1'
    if pow(params['Cv'], params['z1'], pubkey['n']) * \
        pow(pubkey['h'], params['z2'], pubkey['n']) * \
        gmpy2.invert(params['y1'], pubkey['n']) % pubkey['n'] != \
        pow(params['C'], params['x'], pubkey['n']):
        return 'f2'
    if pow(pubkey['g'], params['z1'], pubkey['n']) * \
        pow(pubkey['h'], params['z3'], pubkey['n']) * \
        gmpy2.invert(params['y2'], pubkey['n']) % pubkey['n'] != \
        pow(params['Ce'], params['x'], pubkey['n']):
        return 'f3'
    if pow(pubkey['a'], params['z4'], pubkey['n']) * \
        pow(pubkey['b'], params['z5'], pubkey['n']) * \
        pow(pubkey['g'], params['z6'], pubkey['n']) * \
        pow(pubkey['h'], params['z7'], pubkey['n']) * \
        gmpy2.invert(params['y3'], pubkey['n']) % pubkey['n'] != \
        pow((params['C'] * gmpy2.invert(pubkey['c'], pubkey['n'])), params['x'], pubkey['n']):
        return 'f4'
    if pow(pubkey['g'], params['z4'], pubkey['n']) * \
        pow(pubkey['h'], params['z8'], pubkey['n']) * \
        gmpy2.invert(params['y4'], pubkey['n']) % pubkey['n'] != \
        pow(params['Cx'], params['x'], pubkey['n']):
        return 'f5'
    if pow(pubkey['g'], params['z5'], pubkey['n']) * \
        pow(pubkey['h'], params['z9'], pubkey['n']) * \
        gmpy2.invert(params['y5'], pubkey['n']) % pubkey['n'] != \
        pow(params['Cs'], params['x'], pubkey['n']):
        return 'f6'
    if pow(pubkey['g'], params['z10'], pubkey['n']) * \
        pow(pubkey['h'], params['z11'], pubkey['n']) * \
        gmpy2.invert(params['y6'], pubkey['n']) % pubkey['n'] != \
        pow(params['Ce'], params['x'], pubkey['n']):
        return 'f7'
    if pow(pubkey['g'], params['z6'], pubkey['n']) * \
        pow(pubkey['h'], params['z12'], pubkey['n']) * \
        gmpy2.invert(params['y7'], pubkey['n']) % pubkey['n'] != \
        pow(params['Cz'], params['x'], pubkey['n']):
        return 'f8'
    if pow(params['Cv'], params['z10'], pubkey['n']) * \
        pow(pubkey['h'], params['z7'], pubkey['n']) * \
        gmpy2.invert(params['y8'], pubkey['n']) % pubkey['n'] != \
        pow(params['C'], params['x'], pubkey['n']):
        return 'f9'
    if pow(grnym, params['z4'], settings.RNYM_PARAM['gamma']) * \
        gmpy2.invert(params['y13'], settings.RNYM_PARAM['gamma']) % settings.RNYM_PARAM['gamma'] != \
        pow(params['rnym'], params['x'], settings.RNYM_PARAM['gamma']):
        return 'f10'
    if pow(pubkey['g'], params['z13'], pubkey['n']) * \
        pow(pubkey['h'], params['z14'], pubkey['n']) * \
        gmpy2.invert(params['y9'], pubkey['n']) % pubkey['n'] != \
        pow(params['Cz'], params['x'], pubkey['n']):
        return 'f11'
    if pow(pubkey['g'], params['z15'], pubkey['n']) * \
        pow(pubkey['h'], params['z16'], pubkey['n']) * \
        gmpy2.invert(params['y10'], pubkey['n']) % pubkey['n'] != \
        pow(params['Cw'], params['x'], pubkey['n']):
        return 'f12'
    if pow(pubkey['g'], params['z17'], pubkey['n']) * \
        pow(pubkey['h'], params['z18'], pubkey['n']) * \
        gmpy2.invert(params['y11'], pubkey['n']) % pubkey['n'] != \
        pow(params['Ce'], params['x'], pubkey['n']):
        return 'f13'
    if pow(params['Cw'], params['z17'], pubkey['n']) * \
        gmpy2.powmod(pubkey['h'], params['z19'], pubkey['n']) * \
        gmpy2.invert(params['y12'], pubkey['n']) % pubkey['n'] != \
        pow(params['Cz'], params['x'], pubkey['n']):
        return 'f14'

    return True
    
test_pubkey = {
    'n': 995322805979515834558343468842916180759398735836299642552671277553436605924676002587953511055380189928226375717433917124717908984708606305374032958626554958860909453278783458873306469241244675641365366036514899211875662732509935026648241060520219051521771208017390043986553108598550724072453379477936010566711782041018386220545670193867667919597191273018006880114409775884425240030640659562023006561989146492869210993283887178327183532449477268194712946509715791807615817143939380025007100686067465112278249997157932908876612640941502811186133613668119809840083468471542466139288449635577852164455413746094670350703522699726415589809054462751812570094092751723129609967520463224530348385723535638257968207377103810611269636899915323567881579002268612467803894138380778261525446973153523205937247721136041308068326109914765891224601178223715212135637444748792240096445062639720393786910047718144696810078421071820451081219770308784702534795037936119002778734604013518410242339818832165649911205568297863193799237485570149063423545549483448556190702405905404181393026850748272840861267532602816537334579644915357133405263405757166158992252648721136637621788073868968553137689795416175423960523662971891729651267346627791485749869711443,
    'a': 12087411521712884230548818932215849915230693065039797732079564198974892862597831109952534077668332643422074158482573732210162273511553665928073726857702557181532656284755210457719371511428101155780356008752425295592824942585276622030008447120971014786632830611193537954352443677531942547872959930513777786107406426542695577986048441822499901134217943076792295594037884535736168807745153656459836503075980912522491314057122456046657116758732006466896814708413871176381538974032518089022453265341233558920419342470261993217488003652157418418014185031499816230354904837843025386687622526310803915419536507409000051075609,
    'b': 2242270542618448865314559768022100722842570567056924045921386527068339890312069016915455607823684996518941546805310979946701951045890940223094847042228045197340068854071808813643399366076303642309446375377852951266210119887535655542203198741044381532149819298438455894694068472282714459161981921663456731501364545269170188180702140156122178514295944916099375760015071778556315387790506727099991721489671311421671663831332164661445554395491222541225826729390422552293214145097480372858790808600875996573542654224130516646000702896367211682871372098287864227008583484451059672114799718269165603918369004881137307238801,
    'c': 3847486758243159796895515172456640774238377364207114361071125832899764651849170432345428382841393288105544368133028326434962386649917303953066882299219846125243193404409271954822912465878473288879534414288968728918421955499219107182879335153167910469202674005356189048129023288961608631689799460018567408759115342151784370611824231381685407114183926690312525920769115326113770148573926566857407810445120613989443722658330980493935674273031069032149428145389429503396877464994735840952053414199033745730835357940182948896187316765028005120608327244164393836638867641889517970172625781275092570385942804154408782470404,
    'g': 79694902543738067551569976442969319157658019824384177227697418677955952659774934227050618422966369755344387672958948475697938524471446831922467840437100908707176735894243192411216027732827007061088352261403538026570676397115572002177952579837870853804728089491969851759848647507798224265643108713502271580000225989965230318002488650389878212790775040363567574248704803977378681418421239485699611716709560459011711786402127371191998501459125059706159553864562266401570005849735513443117253160038972164943729421750058017930976637975056919876324187250639458986023466523048333683864079354987625844974359715260665263171705642126352837826511427911122146256409004974013398174475162417012630982051881206119865710800077884329158126259551172451011191286688127719181169155785274421145395273721516526482979092813639555396638286588447369069562536711929150977281360706436723437702802438016012465402942356823014553614221930481531640409796005442620078985607686920544233588362683411619797733875307301960848370977120348813068208389799556865364779562321686205409481124867527508171014542386935301845256634029160723354310753383710435856172469995168262514962659498801439387296050495937425525648384462027253163340768389096813054896052840494598577791933804,
    'h': 14278136476795606093042578702252138383567207660664827197503882837252436020330007573428221010226768924354544728409096950571644623349974331458917210692824944190393686822298809384473072813435484606643889635889639325577412887697019292795500378574036177872816107205922502330189636993674716615204444170097570787865643325103401147525719449566644178816283391334442312995721152436591738178660454319028328401766191414756526796863716097652667483607007870212638826452652070817603293076068105425120980818601086921188668887170846665970718173330136851886359892816611477820696787791870189922552880276262068517345562669130128349115225
}
test_privkey = 31528095261342451740301406447223953201130500465444986684164104146760717912064210434865641479652215516095610216594544666484847351306930749737464213352960225672848940842356100895987198221786461052454737085275901021389299634580346531069586210091083787077180874081642979488844769662664682997022132948937009995039659276993656793941546024131550169018687720100608379213293008819893544659539715051083136272960497233281926151916362773835640963975825225215303144569777947621917868281729329693455786787672823171003568541021484894743900005135956195323707070780851273930006527941477259523457833492602608085906114259691182634702059
